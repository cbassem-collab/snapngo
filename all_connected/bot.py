"""
terminal command to get into SQL: 
source .bash_profile
mysql -u root -p


to get slack running:
ngrok http 5000 (in one terminal)
run this file in another terminal
(both of these things need to happen in order to run )
"""
import os
from pathlib import Path
from dotenv import load_dotenv
import pymysql
import json

from slack_sdk import WebClient
from flask import Flask
from slackeventsapi import SlackEventAdapter
from slack_sdk.errors import SlackApiError


# setting up .env path
env_path = Path('..') / '.env'
load_dotenv(dotenv_path=env_path)

# Create flask app
app = Flask(__name__)
slack_event_adapter = SlackEventAdapter(os.environ['CAT_BOT_SIGNING_SECRET'], '/slack/events', app)

# Define the client obj
client = WebClient(token=os.environ['CAT_BOT_TOKEN'])
# Get the bot id
BOT_ID = client.api_call("auth.test")['user_id']
    

def getAllUsersInfo():
    '''
    Helper function to get all users info from slack
    Takes a users array we get from slack which is a SlackResponse object type
    Returns a dict type containing same info with user id as key
    '''
    # Call the users.list method using the WebClient
    # users.list requires the users:read scope
    result = client.users_list()
    # Get all user info in result
    users_array = result["members"]
    users_store = {}
    # turn the SlackResponse object type into dict type
    for user in users_array:
        # Key user info on their unique user ID
        user_id = user["id"]
        # Store the entire user object (you may not need all of the info)
        users_store[user_id] = user
    return users_store


def generateMessage(assignList):
    '''
    Helper function for sendTasks.
    Get the list of task assigned to a user and format them into a 
    json block message.
    Return the block message
    '''
    #reply = {'text': "Here are your newly generated tasks"}
    block = []
    for taskInfo in assignList:
        text = ("Task" + str(taskInfo[0]) + " Location: " + taskInfo[2] + 
                "\nDescription: " + taskInfo[3] + 
                "\nStart time: " + str(taskInfo[4]) + " Window: " + str(taskInfo[5])+ 
                "\nCompensation: " + str(taskInfo[6]))
        block.append(
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": text
                }
            }
        )
        block.append(
            {
                "type": "actions",
                "elements": [
                    {
                        "type": "button",
                        "text": {
                            "type": "plain_text",
                            "text": "Accept",
                        },
                        "value": "accept"
                    },
                    {
                        "type": "button",
                        "text": {
                            "type": "plain_text",
                            "text": "Reject",
                        },
                        "value": "reject"
                    }
                ],
                "block_id": str(taskInfo[0])
            }
        )
    #reply['blocks'] = block
    #print(reply)
    return block

def sendTasks(assignmentsDict):
    '''
    * Message users to give them new tasks *
    Takes the assignments dictionary generated by getAssignments() in messenger
    Format the tasks each user get into block messages. Send them to each 
        user respectively
    Returns nothing
    ''' 
    for user_id in assignmentsDict:
        if BOT_ID != user_id:    
            try:
                reply = generateMessage(assignmentsDict[user_id])
                texts = "Here are your newly generated tasks"
                client.chat_postMessage(channel=f'@{user_id}', text = texts, blocks = reply)
            except SlackApiError as e:
                # You will get a SlackApiError if "ok" is False
                assert e.response["ok"] is False
                # str like 'invalid_auth', 'channel_not_found'
                assert e.response["error"]
                print(f"Got an error: {e.response['error']}")


# Send a message from this Bot to specified channel (when this file is run)
# client.chat_postMessage(channel='#bot-testing', text=f'From SQL database: {output}!')

@ slack_event_adapter.on('message')
def message(payload):
    """
    Takes the response from a message sent in any chat in which this Bot has
        access to.
    When on, constantly listens for new messages, the responds as dictated below.
    Returns nothing.
    """
    # Recieve payload
    event = payload.get('event', {})
    channel_id = event.get('channel')
    user_id = event.get('user')
    text = event.get('text')
    print(f'\nUSER_ID: {user_id}\n')
    
    # Handle certain responses
    if BOT_ID != user_id:
        if text == "hi":
            try:
                reply = [
                            {
                                "type": "section",
                                "text": {
                                    "type": "mrkdwn",
                                    "text": "This is task1"
                                }
                            },
                            {
                                "type": "actions",
                                "elements": [
                                    {
                                        "type": "button",
                                        "text": {
                                            "type": "plain_text",
                                            "text": "Accept",
                                        },
                                        "value": "accept"
                                    },
                                    {
                                        "type": "button",
                                        "text": {
                                            "type": "plain_text",
                                            "text": "Reject",
                                        },
                                        "value": "reject"
                                    }
                                ],
                                "block_id": "task1"
                            },
                            {
                                "type": "section",
                                "text": {
                                    "type": "mrkdwn",
                                    "text": "This is task2"
                                }
                            },
                            {
                                "type": "actions",
                                "elements": [
                                    {
                                        "type": "button",
                                        "text": {
                                            "type": "plain_text",
                                            "text": "Accept",
                                        },
                                        "value": "accept"
                                    },
                                    {
                                        "type": "button",
                                        "text": {
                                            "type": "plain_text",
                                            "text": "Reject",
                                        },
                                        "value": "reject"
                                    }
                                ],
                                "block_id": "task2"
                            }
                        
                        ]
                
                client.chat_postMessage(channel=f'@{user_id}', blocks = reply)
            except SlackApiError as e:
                # You will get a SlackApiError if "ok" is False
                assert e.response["ok"] is False
                # str like 'invalid_auth', 'channel_not_found'
                assert e.response["error"]
                print(f"Got an error: {e.response['error']}")



if __name__ == "__main__":
    app.run(debug=True)
